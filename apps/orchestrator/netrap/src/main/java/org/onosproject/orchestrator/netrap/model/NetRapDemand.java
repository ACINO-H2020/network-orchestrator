/*
 * Copyright (c) 2018 ACINO Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Net2Plan - ONOS REST Interface
 * Interface description for Net2Plan to ONOS integration. This is the API presented by Net2Plan to ONOS, a separate description exists for the other direction.
 * <p>
 * OpenAPI spec version: 0.1.3
 * Contact: ponsko@acreo.se
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.onosproject.orchestrator.netrap.model;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Objects;

/**
 * Representation of a demand
 **/

@ApiModel(description = "Representation of a demand")

public class NetRapDemand {

    private PortId egressNode = null;
    private PortId ingressNode = null;
    private Double offeredTraffic = null;
    private HashMap attributes = null;
    private Long identifier = null;
    private String routeId = null;
    private NetRapRoute route = null;
    /* TODO: add corresponding functions here */
    private NetRapRoute backupRoute = null;
    private String backupRouteId = null;

    /**
     * nodeId of the destination of the demand
     **/
    public NetRapDemand egressNode(PortId egressNode) {
        this.egressNode = egressNode;
        return this;
    }


    @ApiModelProperty(example = "null", required = true, value = "nodeId of the destination of the demand")
    public PortId getEgressNode() {
        return egressNode;
    }

    public void setEgressNode(PortId egressNode) {
        this.egressNode = egressNode;
    }

    /**
     * nodeId of the source of the demand
     **/
    public NetRapDemand ingressNode(PortId ingressNode) {
        this.ingressNode = ingressNode;
        return this;
    }


    @ApiModelProperty(example = "null", required = true, value = "nodeId of the source of the demand")
    public PortId getIngressNode() {
        return ingressNode;
    }

    public void setIngressNode(PortId ingressNode) {
        this.ingressNode = ingressNode;
    }

    /**
     * The traffic offered by this demand
     **/
    public NetRapDemand offeredTraffic(Double offeredTraffic) {
        this.offeredTraffic = offeredTraffic;
        return this;
    }


    @ApiModelProperty(example = "null", required = true, value = "The traffic offered by this demand")
    public Double getOfferedTraffic() {
        return offeredTraffic;
    }

    public void setOfferedTraffic(Double offeredTraffic) {
        this.offeredTraffic = offeredTraffic;
    }

    /**
     * Optional map of attributes, for ACINO three are required (maxLatencyInMs/double, minAvailability/double, wdmClass/int)
     **/
    public NetRapDemand attributes(HashMap attributes) {
        this.attributes = attributes;
        return this;
    }


    @ApiModelProperty(example = "null", value = "Optional map of attributes, for ACINO three are required (maxLatencyInMs/double, minAvailability/double, wdmClass/int)")
    public HashMap getAttributes() {
        return attributes;
    }

    public void setAttributes(HashMap attributes) {
        this.attributes = attributes;
    }

    /**
     * Unique Identifier, created by net2plan
     **/
    public NetRapDemand identifier(Long identifier) {
        this.identifier = identifier;
        return this;
    }


    @ApiModelProperty(example = "null", value = "Unique Identifier, created by net2plan")
    public Long getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Long identifier) {
        this.identifier = identifier;
    }

    /**
     * Associated route
     **/
    public NetRapDemand routeId(String routeId) {
        this.routeId = routeId;
        return this;
    }


    @ApiModelProperty(example = "null", value = "Associated route")
    public String getRouteId() {
        return routeId;
    }

    public void setRouteId(String routeId) {
        this.routeId = routeId;
    }

    @ApiModelProperty(example = "null", value = "Associated backup route")
    public String getBackupRouteId() {
        return routeId;
    }

    public void setBackupRouteId(String routeId) {
        this.routeId = routeId;
    }

    /**
     * Optional associated route
     **/
    public NetRapDemand route(NetRapRoute route) {
        this.route = route;
        return this;
    }


    @ApiModelProperty(example = "null", value = "Optional associated route")
    public NetRapRoute getRoute() {
        return route;
    }

    public void setRoute(NetRapRoute route) {
        this.route = route;
    }

    @ApiModelProperty(example = "null", value = "Optional associated backup route")
    public NetRapRoute getBackupRoute() {
        return backupRoute;
    }

    public void setBackupRoute(NetRapRoute route) {
        this.backupRoute = route;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NetRapDemand netRapDemand = (NetRapDemand) o;
        return Objects.equals(egressNode, netRapDemand.egressNode) &&
                Objects.equals(ingressNode, netRapDemand.ingressNode) &&
                Objects.equals(offeredTraffic, netRapDemand.offeredTraffic) &&
                Objects.equals(attributes, netRapDemand.attributes) &&
                Objects.equals(identifier, netRapDemand.identifier) &&
                Objects.equals(routeId, netRapDemand.routeId) &&
                Objects.equals(route, netRapDemand.route) &&
                Objects.equals(backupRouteId, netRapDemand.backupRouteId) &&
                Objects.equals(backupRoute, netRapDemand.backupRoute);
    }

    @Override
    public int hashCode() {
        return Objects.hash(egressNode, ingressNode, offeredTraffic, attributes, identifier, routeId, route, backupRouteId, backupRoute);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NetRapDemand {\n");

        sb.append("    egressNode: ").append(toIndentedString(egressNode)).append("\n");
        sb.append("    ingressNode: ").append(toIndentedString(ingressNode)).append("\n");
        sb.append("    offeredTraffic: ").append(toIndentedString(offeredTraffic)).append("\n");
        sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
        sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
        sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
        sb.append("    route: ").append(toIndentedString(route)).append("\n");
        sb.append("    backupRouteId: ").append(toIndentedString(backupRouteId)).append("\n");
        sb.append("    backupRoute: ").append(toIndentedString(backupRoute)).append("\n");

        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

